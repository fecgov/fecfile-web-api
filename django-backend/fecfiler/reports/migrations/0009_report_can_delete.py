# Generated by Django 4.2.11 on 2024-07-02 17:21

from django.db import migrations, models
from django.db import connection


def populate_existing_rows(apps, schema_editor):
    report_model = apps.get_model("reports", "Report")
    for row in report_model.objects.all():
        row.can_delete = False
        row.save()


def create_trigger(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            """
        CREATE OR REPLACE FUNCTION check_can_delete() RETURNS TRIGGER AS $$
        DECLARE
        BEGIN
            PERFORM update_report_can_delete(NEW);
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;


        CREATE OR REPLACE FUNCTION check_transaction_can_delete() RETURNS TRIGGER AS $$
        DECLARE
            associated_report reports_report%ROWTYPE;
        BEGIN
            SELECT * INTO associated_report FROM reports_report WHERE id IN (
                    SELECT report_id FROM reports_reporttransaction
                    WHERE transaction_id = NEW.id LIMIT 1
                );
                PERFORM update_report_can_delete(associated_report);

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;

        CREATE TRIGGER check_can_delete_report
        AFTER UPDATE ON reports_report
        FOR EACH ROW
        WHEN (pg_trigger_depth() = 0) -- Prevent infinite trigger loop
        EXECUTE FUNCTION check_can_delete();

        CREATE TRIGGER check_can_delete_transaction
        AFTER INSERT OR UPDATE ON transactions_transaction
        FOR EACH ROW
        WHEN (pg_trigger_depth() = 0) -- Prevent infinite trigger loop
        EXECUTE FUNCTION check_transaction_can_delete();
        """
        )


def reverse_code(apps, schema_editor):
    # Get models
    report_model = apps.get_model("reports", "Report")
    transaction_model = apps.get_model("transactions", "Transaction")

    # Drop triggers
    triggers = [
        "check_can_delete_report",
        "check_can_delete_transaction",
    ]

    with schema_editor.atomic():
        for trigger in triggers:
            schema_editor.execute(
                "DROP TRIGGER IF EXISTS %s ON %s", (trigger, report_model._meta.db_table)
            )
            schema_editor.execute(
                "DROP TRIGGER IF EXISTS %s ON %s",
                (trigger, transaction_model._meta.db_table),
            )


class Migration(migrations.Migration):

    dependencies = [
        ("reports", "0008_remove_form1m_city_remove_form1m_committee_name_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="report",
            name="can_delete",
            field=models.BooleanField(default=True),
        ),
        migrations.RunSQL(
            """
        CREATE OR REPLACE FUNCTION update_report_can_delete(report RECORD)
        RETURNS VOID AS $$
        BEGIN
            report.can_delete = report.upload_submission_id IS NULL
                AND (report.report_version IS NULL OR report.report_version = '0')
                AND (
                    report.form_3x_id IS NULL OR
                    (
                        report.form_24_id IS NULL
                        AND NOT EXISTS(
                            SELECT "reports_reporttransaction"."id"
                            FROM "reports_reporttransaction" WHERE (
                                EXISTS(
                                    SELECT 1 AS "a" FROM "reports_reporttransaction" U0
                                    INNER JOIN "transactions_transaction" U2
                                    ON (U0."transaction_id" = U2."id")
                                    WHERE (
                                    NOT (U0."report_id" = report.id)
                                    AND (
                                        U0."transaction_id" =
                                        ("reports_reporttransaction"."transaction_id")
                                        OR U2."reatt_redes_id" =
                                        ("reports_reporttransaction"."transaction_id")
                                        OR U2."parent_transaction_id" =
                                        ("reports_reporttransaction"."transaction_id")
                                        OR U2."debt_id" =
                                        ("reports_reporttransaction"."transaction_id")
                                        OR U2."loan_id" =
                                        ("reports_reporttransaction"."transaction_id")
                                    )
                                    ) LIMIT 1
                                )
                                AND "reports_reporttransaction"."report_id" = report.id
                            )
                        )
                    )
                );

            UPDATE reports_report SET can_delete = report.can_delete
            WHERE id = report.id;
        END;
        $$ LANGUAGE plpgsql;
        """
        ),
        migrations.RunPython(create_trigger, reverse_code),
        migrations.RunPython(populate_existing_rows),
    ]
