# Generated by Django 4.2.11 on 2024-07-17 19:59

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("transactions", "0009_update_calculate_loan_payment_to_date"),
    ]

    operations = [
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION calculate_entity_aggregates(
                txn RECORD, sql_committee_id text
            )
            RETURNS VOID AS $$
            DECLARE
                schedule_date date;
            BEGIN
                IF txn.schedule_a_id IS NOT NULL THEN
                    SELECT
                        contribution_date INTO schedule_date
                    FROM
                        transactions_schedulea
                    WHERE
                        id = txn.schedule_a_id;
                ELSIF txn.schedule_b_id IS NOT NULL THEN
                    SELECT
                        expenditure_date INTO schedule_date
                    FROM
                        transactions_scheduleb
                    WHERE
                        id = txn.schedule_b_id;
                END IF;

                EXECUTE '
                    UPDATE transactions_transaction AS t
                    SET aggregate = tc.new_sum
                    FROM (
                        SELECT
                            id,
                            aggregate,
                            date,
                            SUM(effective_amount) OVER (ORDER BY date, created)
                                AS new_sum
                        FROM transaction_view__' || sql_committee_id || '
                        WHERE
                            contact_1_id = $1
                            AND EXTRACT(YEAR FROM date) = $2
                            AND aggregation_group = $3
                            AND force_unaggregated IS NOT TRUE
                    ) AS tc
                    WHERE t.id = tc.id
                        AND (
                            tc.date > $4
                            OR (
                                tc.date = $4
                                AND t.created >= $5
                            )
                        );
                    '
                USING
                    txn.contact_1_id,
                    EXTRACT(YEAR FROM schedule_date),
                    txn.aggregation_group,
                    schedule_date,
                    txn.created;
            END;
            $$
            LANGUAGE plpgsql;
            """
        ),
        migrations.RunSQL(
            """
        CREATE OR REPLACE FUNCTION calculate_calendar_ytd_per_election_office(
            txn RECORD, sql_committee_id text
            )
            RETURNS VOID
            AS $$
        DECLARE
            schedule_date date;
            v_election_code text;
            v_candidate_office text;
            v_candidate_state text;
            v_candidate_district text;
        BEGIN
            SELECT
                COALESCE(disbursement_date, dissemination_date) INTO schedule_date
            FROM transactions_schedulee
            WHERE id = txn.schedule_e_id;

            SELECT election_code INTO v_election_code
            FROM transactions_schedulee
            WHERE id = txn.schedule_e_id;

            SELECT
                candidate_office,
                candidate_state,
                candidate_district INTO v_candidate_office,
                v_candidate_state,
                v_candidate_district
            FROM contacts
            WHERE id = txn.contact_2_id;
            EXECUTE '
                UPDATE transactions_transaction AS t
                SET _calendar_ytd_per_election_office = tc.new_sum
                FROM (
                    SELECT
                        t.id,
                        t.date,
                        SUM(t.effective_amount) OVER
                        (ORDER BY t.date, t.created) AS new_sum
                    FROM transactions_schedulee e
                        JOIN transaction_view__' || sql_committee_id || ' t
                            ON e.id = t.schedule_e_id
                        JOIN contacts c
                            ON t.contact_2_id = c.id
                    WHERE
                        e.election_code  = $1
                        AND c.candidate_office = $2
                        AND (
                            c.candidate_state = $3
                            OR (
                                c.candidate_state IS NULL
                                AND $3 = ''''
                            )
                        )
                        AND (
                            c.candidate_district = $4
                            OR (
                                c.candidate_district IS NULL
                                AND $4 = ''''
                            )
                        )
                        AND EXTRACT(YEAR FROM t.date) = $5
                        AND aggregation_group = $6
                        AND force_unaggregated IS NOT TRUE
                ) AS tc
                WHERE t.id = tc.id
                AND (
                    tc.date > $7
                    OR (
                        tc.date = $7
                        AND t.created >= $8
                    )
                );
            '
            USING
                v_election_code,
                v_candidate_office,
                COALESCE(v_candidate_state, ''),
                COALESCE(v_candidate_district, ''),
                EXTRACT(YEAR FROM schedule_date),
                txn.aggregation_group,
                schedule_date,
                txn.created;
    END;
    $$
    LANGUAGE plpgsql;
            """
        ),
        migrations.RunSQL(
            """
        CREATE OR REPLACE FUNCTION calculate_loan_payment_to_date(
            txn RECORD, sql_committee_id text
        )
            RETURNS VOID
            AS $$
        BEGIN
            EXECUTE '
                UPDATE transactions_transaction AS t
                SET loan_payment_to_date = tc.new_sum
                FROM (
                    SELECT
                        id,
                        loan_key,
                        SUM(effective_amount) OVER (ORDER BY loan_key) AS new_sum
                    FROM transaction_view__' || sql_committee_id || '
                    WHERE loan_key LIKE (
                        SELECT
                            CASE
                                WHEN loan_id IS NULL THEN transaction_id
                                ELSE (
                                    SELECT transaction_id
                                    FROM transactions_transaction
                                    WHERE id = t.loan_id
                                )
                            END
                        FROM transactions_transaction t
                        WHERE id = $1
                    ) || ''%%'' -- Match the loan_key with a transaction_id prefix
                ) AS tc
                WHERE t.id = tc.id
                AND tc.loan_key LIKE ''%%LOAN''
                ;
            '
            USING txn.id;
        END;
        $$
        LANGUAGE plpgsql;
        """
        ),
    ]
