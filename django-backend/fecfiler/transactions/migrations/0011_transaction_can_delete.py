# Generated by Django 5.0.8 on 2024-08-28 15:19

from django.db import connection, migrations, models


def create_trigger_function(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            """
        CREATE OR REPLACE FUNCTION update_transactions_can_delete() RETURNS TRIGGER AS $$
        BEGIN
            IF NEW.upload_submission_id is NOT NULL THEN
                UPDATE transactions_transaction
                SET can_delete = FALSE
                WHERE id IN (
                    SELECT transaction_id
                    FROM reports_reporttransaction
                    WHERE report_id = NEW.id
                )
                OR loan_id IN (
                    SELECT transaction_id
                    FROM reports_reporttransaction
                    WHERE report_id = NEW.id
                )
                OR debt_id IN (
                    SELECT transaction_id
                    FROM reports_reporttransaction
                    WHERE report_id = NEW.id
                );
            ELSE
                UPDATE transactions_transaction tt
                SET can_delete = CASE
                    WHEN (
                        (tt.schedule_c_id IS NOT NULL OR tt.schedule_d_id IS NOT NULL)
                        AND (tt.loan_id IS NOT NULL OR tt.debt_id IS NOT NULL)
                    ) THEN False
                    WHEN EXISTS (
                        SELECT 1
                        FROM reports_reporttransaction rr1
                        JOIN reports_report r ON rr1.report_id = r.id
                        WHERE rr1.transaction_id = tt.id
                        AND r.upload_submission_id IS NOT NULL
                    ) THEN False
                    ELSE True
                END
                WHERE tt.id IN (
                    SELECT rr.transaction_id
                    FROM reports_reporttransaction rr
                    WHERE rr.report_id = NEW.id
                )
                OR tt.loan_id IN (
                    SELECT rr.transaction_id
                    FROM reports_reporttransaction rr
                    WHERE rr.report_id = NEW.id
                )
                OR tt.debt_id IN (
                    SELECT rr.transaction_id
                    FROM reports_reporttransaction rr
                    WHERE rr.report_id = NEW.id
                );
            END IF;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        """
        )


def drop_trigger_function(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute("DROP FUNCTION IF EXISTS update_transactions_can_delete();")


def create_trigger(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            """
            CREATE TRIGGER report_status_update
            AFTER UPDATE OF upload_submission_id ON reports_report
            FOR EACH ROW
            EXECUTE FUNCTION update_transactions_can_delete();
            """
        )


def drop_trigger(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute("DROP TRIGGER IF EXISTS report_status_update ON reports_report;")


class Migration(migrations.Migration):
    dependencies = [
        ("transactions", "0010_update_aggregate_trigger_performance"),
    ]

    operations = [
        migrations.AddField(
            model_name="transaction",
            name="can_delete",
            field=models.BooleanField(default=True),
        ),
        migrations.RunPython(create_trigger_function, reverse_code=drop_trigger_function),
        migrations.RunPython(create_trigger, reverse_code=drop_trigger),
    ]
