# Generated by Django 4.2.7 on 2024-01-09 19:15

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",  # noqa
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        max_length=128, null=True, verbose_name="password"
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                ("username", models.CharField(max_length=100, unique=True)),
                ("cmtee_id", models.CharField(max_length=9)),
                ("contact", models.CharField(max_length=10)),
                ("first_name", models.CharField(blank=True, max_length=40, null=True)),
                ("last_name", models.CharField(blank=True, max_length=40, null=True)),
                ("role", models.CharField(blank=True, max_length=40)),
                ("tagline", models.CharField(blank=True, max_length=140)),
                ("delete_ind", models.CharField(default="N", max_length=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_login", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",  # noqa
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",  # noqa
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("login_code_counter", models.CharField(default=0, max_length=1)),
                (
                    "register_token",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
                (
                    "personal_key",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                ("status", models.CharField(blank=True, max_length=15, null=True)),
                ("code_generated_counter", models.CharField(default=0, max_length=2)),
                ("secret_key", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",  # noqa
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "unique_together": {("username", "email")},
            },
        ),
    ]
