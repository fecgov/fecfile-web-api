# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  browser-tools: circleci/browser-tools@1.2.3

# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  lint:
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    docker:
      - image: cimg/python:3.7

    steps:
      - checkout

      - run:
          name: Install python test requirements
          command: pip install -r requirements-test.txt
          working_directory: ~/project/

      - run:
          name: Run lint
          command: flake8 fecfiler
          working_directory: ~/project/django-backend/

  unit-test:
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    docker:
      - image: cimg/python:3.7
      - image: cimg/postgres:12.8

    steps:
      - run:
          name: Check for necessary environment variables
          command: |
            while read var; do
              [ -z "${!var}" ] && { echo "Environment variable $var is needed for a successful test run, there is no default."; exit 1; }
            done \<< EOF
            FECFILE_FEC_WEBSITE_API_KEY
            EOF
            exit 0

      - checkout

      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/
          pip-dependency-file: requirements.txt

      - run:
          name: Wait for the database to be active
          command: pip install psycopg2 psycopg2-binary retry &&  python wait_for_db.py
          working_directory: ~/project/django-backend/

      - run:
          name: Load test database fixure
          command: |
            sudo apt-get update &&
            sudo apt-get install postgresql-client-12 &&
            export PGPASSWORD=${FECFILE_DB_PASSWORD} &&
            psql -h ${FECFILE_DB_HOST}  ${FECFILE_DB_NAME} ${FECFILE_DB_USERNAME} < fec_clean_dev_db_backup-20211227.sql
          working_directory: ~/project/db

      - run:
          name: Create migrations
          command: python manage.py makemigrations
          working_directory: ~/project/django-backend/

      - run:
          name: run migrations
          # This assumes pytest is installed via the install-package step above
          command: python manage.py migrate
          working_directory: ~/project/django-backend/

      - run:
          name: Create migrations
          # This assumes pytest is installed via the install-package step above
          command: python manage.py makemigrations
          working_directory: ~/project/django-backend/

      - run:
          name: run migrations
          # This assumes pytest is installed via the install-package step above
          command: python manage.py migrate
          working_directory: ~/project/django-backend/

      - run:
          name: Run tests
          # Use built-in Django test module
          command: python manage.py test --keep
          working_directory: ~/project/django-backend/

  deploy:

    docker:
      - image: cimg/python:3.7

    steps:
      - checkout

      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements.txt

      - run:
          name: Installs for deploy
          command: |
            mkdir -p $HOME/bin
            export PATH=$HOME/bin:$PATH
            curl -L "https://cli.run.pivotal.io/stable?release=linux64-binary&version=7.1.0" | tar xzv -C $HOME/bin

      - deploy:
          name: Deploy API
          command: |
            export PATH=$HOME/bin:$PATH
            invoke deploy --branch $CIRCLE_BRANCH --login True

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test: # This is the name of the workflow, feel free to change it to better match your workflow.
    jobs:
      - unit-test
      - lint
      - deploy:
          requires:
            - unit-test
            - lint
