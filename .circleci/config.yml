# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  browser-tools: circleci/browser-tools@1.2.3

# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  lint:
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    docker:
      - image: cimg/python:3.7

    steps:
      - checkout

      - run:
          name: Install python test requirements
          command: pip install -r requirements-test.txt
          working_directory: ~/project/django-backend/

      - run:
          name: Run lint
          command: flake8 fecfiler
          working_directory: ~/project/django-backend/

  test:
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    docker:
      - image: cimg/python:3.7-node
      - image: cimg/postgres:12.8

    steps:
      - run:
          name: Check for necessary environment variables
          command: |
            while read var; do
              [ -z "${!var}" ] && { echo "Environment variable $var is needed for a successful test run, there is no default."; exit 1; }
            done \<< EOF
            FECFILE_FEC_WEBSITE_API_KEY
            EOF
            exit 0

      - checkout

      - run:
          name: Create unified requirements so CircleCI can cache them
          command: |
            cd ~/project/django-backend
            ls -l
            cat requirements.txt > requirements-all.txt
            echo >> requirements-all.txt  # blank in case new newline at end of requirements.txt
            cat requirements-test.txt >> requirements-all.txt

      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/django-backend/
          pip-dependency-file: requirements-all.txt

      - run:
          name: Wait for the database to be active
          command: pip install psycopg2 psycopg2-binary retry &&  python wait_for_db.py
          working_directory: ~/project/django-backend/

      - run:
          name: Load test database fixure
          command: |
            sudo apt-get update &&
            sudo apt-get install postgresql-client-12 &&
            export PGPASSWORD=${FECFILE_DB_PASSWORD} &&
            psql -h ${FECFILE_DB_HOST}  ${FECFILE_DB_NAME} ${FECFILE_DB_USERNAME} < fec_clean_dev_db_backup-20211227.sql
          working_directory: ~/project/db

      - run:
          name: Create/run migrations
          command: |
            python manage.py makemigrations
            python manage.py migrate
          working_directory: ~/project/django-backend/

      - run:
          name: Run lint
          command: |
            flake8 --config django-backend/.flake8 --output-file flake8.out . || echo "Found lint errors: " && cat flake8.out

      - run:
          name: Bandit security checks
          command: |
            bandit -f json --output bandit.out  -ii -ll -r . || echo "Bandit found issues" && cat bandit.out

      - run:
          name: Run tests
          # Use built-in Django test module
          command: coverage run --source='.' manage.py test --keep
          working_directory: ~/project/django-backend/

      - run:
          name: setup coverage dir
          command: mkdir ~/project/coverage-reports

      - run:
          name: Make XML coverage report
          command: coverage xml -o ~/project/coverage-reports/coverage.xml
          working_directory: ~/project/django-backend


      # Sonar cloud setup and scanning
      - run:
          name: Create sonar-scanner cache directory if it doesn't exist
          command: mkdir -p /tmp/cache/scanner
      - restore_cache:
          keys:
            - v1-sonarcloud-scanner-4.6.2.2472
      - run:
          name: SonarCloud
          command: |
            set -e
            VERSION=4.6.2.2472
            if [ -z "$SONAR_TOKEN" ]; then
                 echo "You must set SONAR_TOKEN environemnt variable"
                 exit 1
            fi
            SCANNER_DIRECTORY=/tmp/cache/scanner
            export SONAR_USER_HOME=$SCANNER_DIRECTORY/.sonar
            OS="linux"
            echo $SONAR_USER_HOME
            if [[ ! -x "$SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner" ]]; then
              curl -Ol https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$VERSION-$OS.zip
              unzip -qq -o sonar-scanner-cli-$VERSION-$OS.zip -d $SCANNER_DIRECTORY
            fi

            chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
            chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/jre/bin/java
            $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
          environment:
            SONARQUBE_SCANNER_PARAMS: '{"sonar.host.url":"https://sonarcloud.io"}'
      - save_cache:
          key: v1-sonarcloud-scanner-4.6.2.2472
          paths: /tmp/cache/scanner

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test: # This is the name of the workflow, feel free to change it to better match your workflow.
    jobs:
      - test
      - lint


