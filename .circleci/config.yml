# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  browser-tools: circleci/browser-tools@1.2.3
  node: circleci/node@5.0.2

# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  test:
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    docker:
      - image: cimg/python:3.10-node
      - image: cimg/postgres:14.13
      - image: cimg/redis:6.2.6

    steps:
      - run:
          name: Check for necessary environment variables
          command: |
            while read var; do
              [ -z "${!var}" ] && { echo "Environment variable $var is needed for a successful test run, there is no default."; exit 1; }
            done \<< EOF
            FECFILE_FEC_WEBSITE_API_KEY
            EOF
            exit 0

      - checkout

      - run:
          name: Create unified requirements so CircleCI can cache them
          command: |
            cd ~/project/
            ls -l
            cat requirements.txt > requirements-all.txt
            echo >> requirements-all.txt  # blank in case new newline at end of requirements.txt
            cat requirements-test.txt >> requirements-all.txt

      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/
          pip-dependency-file: requirements-all.txt

      - run:
          name: Load test database fixure
          command: |
            psql ${DATABASE_URL} < e2e-test-db.sql
          working_directory: ~/project/db

      - run:
          name: Create/run migrations
          command: |
            python manage.py migrate --no-input --traceback --verbosity 3
          working_directory: ~/project/django-backend/

      # Only use SonarCloud security checking for now.
      #      - run:
      #          name: Bandit security checks
      #          command: |
      #            bandit -f json --output bandit.out  -ii -ll -r . || echo "Bandit found issues" && cat bandit.out

      - run:
          name: Run tests
          # Use built-in Django test module
          command: coverage run --source='.' --rcfile=.coveragerc manage.py test
          working_directory: ~/project/django-backend/

      - run:
          name: setup coverage dir
          command: mkdir ~/project/coverage-reports

      - run:
          name: Make XML coverage report
          command: coverage xml -o ~/project/coverage-reports/coverage.xml
          working_directory: ~/project/django-backend

      # Sonar cloud setup and scanning
      - run:
          name: Create sonar-scanner cache directory if it doesn't exist
          command: mkdir -p /tmp/cache/scanner
      - restore_cache:
          keys:
            - v1-sonarcloud-scanner-5.0.1.3006
      - run:
          name: SonarCloud
          command: |
            set -e
            VERSION=5.0.1.3006
            if [ -z "$SONAR_TOKEN" ]; then
                 echo "You must set SONAR_TOKEN environemnt variable"
                 exit 1
            fi
            SCANNER_DIRECTORY=/tmp/cache/scanner
            export SONAR_USER_HOME=$SCANNER_DIRECTORY/.sonar
            OS="linux"
            echo $SONAR_USER_HOME
            if [[ ! -x "$SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner" ]]; then
              curl -Ol https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$VERSION-$OS.zip
              unzip -qq -o sonar-scanner-cli-$VERSION-$OS.zip -d $SCANNER_DIRECTORY
            fi

            chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
            chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/jre/bin/java
            $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
          environment:
            SONARQUBE_SCANNER_PARAMS: '{"sonar.host.url":"https://sonarcloud.io"}'
      - save_cache:
          key: v1-sonarcloud-scanner-5.0.1.3006
          paths: /tmp/cache/scanner

      - run:
          name: Run lint
          command: |
            flake8 --config django-backend/.flake8

  deploy-job:
    docker:
      - image: cimg/python:3.10

    steps:
      - checkout

      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements.txt

      - run:
          name: Installs for deploy
          command: |
            mkdir -p $HOME/bin
            export PATH=$HOME/bin:$PATH
            curl -L "https://cli.run.pivotal.io/stable?release=linux64-binary&version=7.1.0" | tar xzv -C $HOME/bin

      - run:
          name: Deploy API
          command: |
            export PATH=$HOME/bin:$PATH
            invoke deploy --branch $CIRCLE_BRANCH --login

  docs-build:
    docker:
      - image: cimg/python:3.10

    steps:
      - checkout

      - run:
          name: Create unified requirements so CircleCI can cache them
          command: |
            cd ~/project/
            ls -l
            cat requirements.txt > requirements-all.txt
            echo >> requirements-all.txt  # blank in case new newline at end of requirements.txt
            cat requirements-test.txt >> requirements-all.txt

      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/
          pip-dependency-file: requirements-all.txt

      - run:
          name: Run Sphinx
          command: make html
          working_directory: ~/project/docs

      - persist_to_workspace:
          root: ~/project/docs/_build
          paths: html

  docs-deploy:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/docs/_build
      - run:
          name: Disable jekyll builds
          command: touch ~/project/docs/_build/html/.nojekyll
      - node/install:
          install-yarn: false
          node-version: "16.13"
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Configure git
          command: |
            git config user.email "apiinfo@fec.gov"
            git config user.name "apiinfo"
      - add_ssh_keys:
          fingerprints:
            - "0f:22:e1:9d:81:ea:82:a0:fa:18:f2:0f:25:f7:3f:6f"
      - run:
          name: Deploy docs to gh-pages branch
          command: npx gh-pages --dotfiles --dist ~/project/docs/_build/html

  # This job kicks off the e2e-test pipeline in the fecfile-web-app project.
  # It is used to run the e2e tests when the api is deployed to dev/stage/prod.
  # It uses the is-triggered-e2e-test parameter which is used in the fecfile-web-app
  # circleci config file to differentiate it from the nightly runs.
  trigger-e2e-test-pipeline:
    docker:
      - image: cimg/base:2021.11
    resource_class: small
    steps:
      - run:
          name: Ping another pipeline
          command: |
            CREATED_PIPELINE=$(
              curl -v https://circleci.com/api/v2/project/gh/fecgov/fecfile-web-app/pipeline \
              --header "Content-Type: application/json" \
              --header "Accept: application/json" \
              --header "Circle-Token: $CIRCLE_TOKEN" \
              --data '{"branch":"'$CIRCLE_BRANCH'","parameters":{"is-triggered-e2e-test":true}}' \
              | jq -r '.id'
            )
            echo "created pipeline"
            echo $CREATED_PIPELINE

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  primary: # This is the name of the workflow, feel free to change it to better match your workflow.
    jobs:
      - test
      # This job is triggered whenever a commit is made to the dev/stage/prod branches.
      # It kicks off the e2e-test pipeline in the fecfile-web-app project.
      - trigger-e2e-test-pipeline:
          filters:
            branches:
              only: /develop|release\/sprint-[\.\d]+|main/
      - deploy-job:
          requires:
            - test
          filters:
            branches:
              only: /develop|release\/sprint-[\.\d]+|main/
      - docs-build:
          requires:
            - test
          filters:
            branches:
              only: develop
      - docs-deploy:
          requires:
            - docs-build
          filters:
            branches:
              only: develop
